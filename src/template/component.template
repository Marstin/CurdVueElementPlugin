<template>
  <el-container class="total-container">
    <el-aside class="container-border" width="320px">
      <el-form size="medium" label-width="40px" style="width: 280px;margin: 100px auto;">
        <el-form-item label="项目">
          <el-select v-model="projId">
             <el-option v-for="item in projects"
              :key="item.value"
              :label="item.text"
              :value="item.value">
             </el-option>
          </el-select>
        </el-form-item>
        <el-form-item label="类型">
          <el-select v-model="versAppType">
            <el-option v-for="item in types"
              :key="item.value"
              :label="item.text"
              :value="item.value">
             </el-option>
          </el-select>
        </el-form-item>
      </el-form>
    </el-aside>
    <el-container class="container-border">
      <el-header style="height:100px">
        <el-form :inline="true" :model="searchModel" class="search-form-inline" size="big">
          <el-form-item label="版本">
            <el-input v-model="searchModel.versName"></el-input>
          </el-form-item>
          <el-form-item label="状态">
            <el-select v-model="searchModel.status">
              <el-option label="正常" value="1"></el-option>
              <el-option label="删除" value="2"></el-option>
            </el-select>
          </el-form-item>
          <el-form-item class="el-form-search-button-item">
            <el-button type="primary" @click="onSearch">查询</el-button>
          </el-form-item>
        </el-form>
      </el-header>
      <el-divider></el-divider>
      <el-main>
      <div style="text-align: left;margin-bottom:20px;">
      <el-button @click="onAdd">新增</el-button>
      <el-button :disabled="editDisabled" @click="onEdit">修改</el-button>
      <el-button :disabled="delDisabled" @click="onDelete">删除</el-button>
      <el-button :disabled="editDisabled" @click="qrcodeDialogVisible = true">二维码链接</el-button>
      </div>
        <el-table
          ref="appList"
          :data="tableData"
          :height="tableHeight"
          tooltip-effect="dark"
          @selection-change="handleSelectionChange"
          style="width: 100%">
          <el-table-column
            type="selection"
            width="55">
          </el-table-column>
          <el-table-column
            prop="projectName"
            label="项目名称"
            width="200">
          </el-table-column>
          <el-table-column
            prop="versAppType"
            label="应用类型"
            width="200">
          </el-table-column>
          <el-table-column
            prop="versName"
            label="版本"
            width="240">
          </el-table-column>
           <el-table-column
            prop="versDesc"
            label="版本描述">
          </el-table-column>
          <el-table-column
            prop="createTime"
            label="创建时间"
            width="160"
            align="center"
            show-overflow-tooltip>
          </el-table-column>
        </el-table>
        <el-pagination
          :current-page="pageNum"
          :page-sizes="[10, 20, 50]"
          :page-size="pageSize"
          @size-change="pageSizeChanged"
          @current-change="pageNumChanged"
          layout="total, sizes, prev, pager, next, jumper"
          :total="pageTotal">
        </el-pagination>
      </el-main>
    </el-container>
    <el-dialog
      :title="dialogTitle"
      @open="onAppDataFormDialogOpen"
      :visible.sync="dialogVisible"
      width="30%">
      <el-form :model="form" ref="appDataForm" :rules="rules" label-width="80px">
        <el-form-item label="项目名称" prop="projId">
          <el-select v-model="form.projId">
            <el-option v-for="item in projects"
              :key="item.value"
              :label="item.text"
              :value="item.value">
            </el-option>
          </el-select>
        </el-form-item>
        <el-form-item label="应用类型" prop="versAppType">
          <el-select v-model="form.versAppType">
            <el-option v-for="item in types"
              :key="item.value"
              :label="item.text"
              :value="item.value">
            </el-option>
          </el-select>
        </el-form-item>
        <el-form-item label="版本" prop="versName">
          <el-input v-model="form.versName" autocomplete="off"></el-input>
        </el-form-item>
        <el-form-item label="版本描述" >
          <el-input v-model="form.versDesc" :rows="3" autocomplete="off"></el-input>
        </el-form-item>
        <el-form-item label="版本顺序" prop="versSequence">
          <el-input v-model="form.versSequence" autocomplete="off"></el-input>
        </el-form-item>
        <el-form-item label="版本文件" prop="filename">
          <el-input :readonly="true" v-model="filename" class="file-input"></el-input>
          <el-button type="primary" @click="onGetFile">浏览
            <input type="file" style="display:none;" @change="getFile" ref="FileInput">
          </el-button>
        </el-form-item>
      </el-form>
      <span slot="footer" class="dialog-footer">
        <el-button @click="_hideDialog()">关闭</el-button>
        <el-button type="primary" @click="onSave">保存</el-button>
      </span>
    </el-dialog>
     <el-dialog
      title="扫描二维码下载"
      :visible.sync="qrcodeDialogVisible"
      @opened="showQsCode"
      width="296px">
      <div class="qrcode" style="width:200px;height:250px;" ref="qrCodeUrl"></div>
      <span slot="footer" class="dialog-footer">
        <el-button type="primary" @click="onCopyLink">复制链接</el-button>
        <el-button @click="qrcodeDialogVisible = false">关闭</el-button>
      </span>
    </el-dialog>
  </el-container>
</template>

<script lang="ts">
import QRcode from "@/util/QRcode"
import AppServices from "@/services/appmanage";
import {showMessage,showConfirm,showError,deleteObjectEmpty,formatterTime} from "@/util/CommonUtil"
const { getProjects,getTypes,getAppList,deleteApp,updateApp,addAppVersion,validateAppVersion,getAppDownUrl } = AppServices;

export default {
  data(){
    const validateFile = (rule: any, value: any, callback: any) => {
      if(!(this as any).filename){
        callback("请选择文件")
      } else {
        callback()
      }
    };
    const validateVersName = (rule: any, value: any, callback: any) => {
      const form = (this as any).form;
      if(value === ''){
        callback("请输入版本名称")
      }else if(!form.projId){
        callback("请选择项目")
      } else {
        validateAppVersion({'projId':form.projId,'versName':form.versName,'id':form.id}).then((res: any) => {
          if(res.result === '1'){
            callback()
          } else {
            callback(res.info || '该版本名已存在')
          }
        })
      }
    };
    const validateProjId = (rule: any, value: any, callback: any) => {
      if(value === ''){
        callback("请选择项目")
      } else {
        if ((this as any).form.versName) {
          (this.$refs.appDataForm as any).validateField('versName');
        }
        callback();
      }
    };
    return {
      searchModel: {
        versName:'',
        status:'1'
      },
      form:{
        id:'',
        projId:'',
        versName:'',
        versAppType:'',
        versDesc:'',
        versUrl:'',
        file:null,
        versSequence:'',
        filename:''//校验时使用，无实在意义
      },
      filename:'',
      dialogTitle:"",
      qrcodeDialogVisible:false,
      projId:'',
      editDisabled:true,
      delDisabled:true,
      dialogVisible:false,
      versAppType:'',
      tableData: [],
      pageSize:10,
      pageNum:1,
      pageTotal:0,
      projects:[],
      types:[],
      qrcode:null,
      rules:{
        projId:[
          //{ required: true, message: '请选择项目', trigger: 'change' },
          { required: true,validator: validateProjId,  trigger: 'change' }

        ],
        versAppType:[
          { required: true, message: '请选择类型', trigger: 'change' }
        ],
        versName:[
         // { required: true, message: '请输入版本名称',  trigger: 'blur' },
          { required: true, validator: validateVersName,  trigger: 'blur' }
        ],
        versSequence:[
          { required: true, message: '请输入顺序',  trigger: 'blur' },
        ],
        filename:[
          { required: true, validator: validateFile, trigger: 'change' }
        ]
      },
      appUrl:'',
      tableHeight:document.documentElement.clientHeight-350
    }
  },
  mounted(){
    //this.loadTableData();
    window.addEventListener('resize',this.getHeight,false);
  },
  methods:{
    getHeight(){
      this.tableHeight = document.documentElement.clientHeight-350;
    },
    onCopyLink() {
      this.$copyText(this.appUrl).then(() => this.$message({
        message: '复制成功',
        type: 'success'
      }))
    },
    showQsCode() {
      getAppDownUrl((this.$refs.appList as any).selection[0].id).then( (url) => {
        this.appUrl = 'http://192.168.50.216:8089' + url;
        this.qrcode ? (() => {
          (this.qrcode as any).clear(); // clear the code.
          (this.qrcode as any).makeCode(this.appUrl);
        })():(
          this.qrcode = new QRcode(this.$refs.qrCodeUrl, this.appUrl)
        ) 
      })
    },
    onSearch() {
      this.loadTableData()
    },
    getFile() {
      this.filename = (this.$refs.FileInput as any).files[0].name
    },
    onGetFile(){
      (this.$refs.FileInput as any).dispatchEvent(new MouseEvent('click')) 
    },
    pageSizeChanged(size: number){
      this.pageSize = size;
      this.loadTableData()
    },
    pageNumChanged(num: number){
      this.pageNum = num;
      this.loadTableData()
    },
    onSave(){
      (this.$refs.appDataForm as any).validate((valid: boolean) => {
        if (valid) {
          console.log(this.form);
          const func: Function = this.form.id ? updateApp:addAppVersion;
          this._hideDialog()
          func(this.convertSaveData(this.form),(this.$refs.FileInput as any).files[0])
          .then((res: any) => showMessage(res))
          .then(() => {
            return this.loadTableData();
          }).catch( (err: any) => {
            showError(err)
          });
        } else {
          return false;
        }
      });
    },
    convertSaveData(data: any){
      const { versUrl,file,filename,createTime,status,...obj } = data;
      return obj;
    },
    onAdd(){
      this.dialogTitle = "新增"
      this.setDetailFormData({})
    },
    onEdit(){
      this.dialogTitle = "修改"
      this.setDetailFormData((this.$refs.appList as any).selection[0]);
    },
    setDetailFormData(data: any){
      this.filename = this.getFileNameByUrl(data.versUrl)
      this.form = Object.assign({}, data);
      this._showDialog();
    },
    getFileNameByUrl(url: string){
      return url&&url.substr(url.lastIndexOf("/") + 1);
    },
    onAppDataFormDialogOpen(){
      this.$refs.appDataForm&&(this.$refs.appDataForm as any).resetFields()
    },
    _showDialog(){
      this.dialogVisible = true;
    },
    _hideDialog(){
      this.dialogVisible = false;
    },
    loadTableData() {
      return getAppList(this.getQueryParams())
      .then((data: any) => {
        this.pageTotal = data.total;
        this.tableData = this.converDataToList(data.rows,this.projects);
      })
    },
    converDataToList(rows: any[],replaceArr: any[]): any{
      const rMap = {}
      replaceArr.forEach(r => {
        (rMap as any)[r.value] = r.text;
      })
      return rows.map((row: any) =>  row = { ...row, createTime:formatterTime(row.createTime),projectName: (rMap as any)[row.projId]} );
    },
    getQueryParams(){
      return {
        page:this.pageNum,
        rows:this.pageSize,
        filter:JSON.stringify(deleteObjectEmpty({
          projId:this.projId,
          versAppType:this.versAppType,
          versName:this.searchModel.versName,
          status:this.searchModel.status
        }))
      }
    },
    onDelete(){
      const ids = this.getSeletionIds();
      showConfirm("确认删除？")
      .then((result: any) => {
        if(result.isConfirmed) {
          return  deleteApp(ids).then((d)=> showMessage(d))
          .then(() => this.loadTableData())
          .catch(err => {
            showError(err);
          });
        }
      })
    },
    getSeletionIds(){
      return (this.$refs.appList as any).selection.map((d: any) => d.id ).toString();
    },
    handleSelectionChange(){
      const selectLength = (this.$refs.appList as any).selection.length;
      this.editDisabled = selectLength === 1 ? false : true;
      this.delDisabled = selectLength > 0 ? false : true;
    }
  },
  async created(){
    getProjects().then((data: any) => {
      this.projects = data;
      this.projId = data[0].value;
      getTypes().then((data: any) => {
        this.types = data 
        this.versAppType = data[0].value;
      });
    });
  },
  watch:{
    projId(newData: any,oldData: any){
      oldData&&this.loadTableData();
    },
    versAppType(){
      this.loadTableData();
    }
  }
}

</script>

<style scoped lang="scss">
  .total-container {
    position: absolute;
    width: 100%;
    padding: 10px;
    height: calc(100% - 63px)
  }
  .el-aside {
    background-color: #ffffff;
    text-align: center;
    margin-right: 15px;
  }
  .container-border {
    border: 1px solid #dddee1;
    border-color: #e9eaec;
  }
  .bottom-border {
    border-bottom: 1px solid #dddee1;
    border-bottom-color: #e9eaec;
  }
  .el-divider {
    width: 98%;
    margin: 0px auto 10px auto;
  }
  .el-header {
    height: 100px;
    align-items: center;
    display: flex;
  }
  .search-form-inline {
    padding: 20px 20px 0 20px;
  }
  .el-form--inline .el-form-item {
    margin-right: 50px;
  }
  .el-form-search-button-item {
    position: absolute;
    right: 20px;
  }
  .el-pagination {
    position: absolute;
    bottom: 30px;
    right: 70px;
  }
  .el-select {
    width: 100%;
  }
  .file-input {
    width: calc(100% - 90px);
    float: left;
  }
</style>